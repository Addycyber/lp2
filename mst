# Disjoint Set (Union-Find) Class
class DisjointSet:
    def __init__(self, vertices):
        self.parent = {v: v for v in vertices}

    def find(self, item):
        if self.parent[item] != item:
            self.parent[item] = self.find(self.parent[item])  # Path compression
        return self.parent[item]

    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        if root_u != root_v:
            self.parent[root_u] = root_v
            return True
        return False

# Kruskal's Algorithm
def kruskal_mst(vertices, edges):
    # Sort edges by weight (greedy step)
    edges.sort(key=lambda x: x[2])
    ds = DisjointSet(vertices)

    mst = []
    total_weight = 0

    for u, v, weight in edges:
        if ds.union(u, v):
            mst.append((u, v, weight))
            total_weight += weight

    return mst, total_weight

# Example Graph
vertices = ['A', 'B', 'C', 'D', 'E']
edges = [
    ('A', 'B', 1),
    ('A', 'C', 3),
    ('B', 'C', 1),
    ('B', 'D', 4),
    ('C', 'D', 1),
    ('D', 'E', 2),
    ('C', 'E', 5)
]

mst, total = kruskal_mst(vertices, edges)

print("Edges in MST:")
for u, v, w in mst:
    print(f"{u} -- {v} == {w}")
print("Total weight of MST:", total)
