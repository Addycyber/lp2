def solve_n_queens(n):
    board = [-1] * n  # board[i] = column index of queen in row i
    cols = set()
    diag1 = set()
    diag2 = set()
    solutions = []

    def backtrack(row):
        if row == n:
            solutions.append(board[:])
            return

        for col in range(n):
            if col in cols or (row - col) in diag1 or (row + col) in diag2:
                continue

            board[row] = col
            cols.add(col)
            diag1.add(row - col)
            diag2.add(row + col)

            backtrack(row + 1)

            cols.remove(col)
            diag1.remove(row - col)
            diag2.remove(row + col)

    backtrack(0)

    for sol in solutions:
        for i in sol:
            print('.' * i + 'Q' + '.' * (n - i - 1))
        print()

# Example: solve for 4 queens
solve_n_queens(10)
